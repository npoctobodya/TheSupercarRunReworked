<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="46">
  <CheatEntries>
    <CheatEntry>
      <ID>866</ID>
      <Description>"THE SUPERCAR RUN REWORKED"</Description>
      <Options moActivateChildrenAsWell="1"/>
      <GroupHeader>1</GroupHeader>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>123</Key>
          </Keys>
          <Description>Activate mod</Description>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>1425</ID>
          <Description>"Difficulty Check"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(diff_check,Need For Speed The Run.exe,8B B0 38 81 06 00)
alloc(difficulty,4)

difficulty:
  dd 0

registersymbol(difficulty)

alloc(newmem,$20)
label(code)
label(return)
/*
0 - easy
1 - normal
2 - hard
3 - extreme
*/

newmem:
  mov esi,[eax+00068138]
  mov [difficulty],esi

code:
  jmp return

diff_check:
  jmp newmem
  nop
return:
registersymbol(diff_check)

[DISABLE]

diff_check:
  db 8B B0 38 81 06 00

dealloc(newmem)
dealloc(difficulty)
unregistersymbol(diff_check)
unregistersymbol(difficulty)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1422</ID>
              <Description>"Difficulty"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>difficulty</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1106</ID>
          <Description>"Story Mode Event Hook"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,$30)
alloc(storyEvent,4)
registersymbol(storyEvent)
label(returnhere)
label(originalcode)
label(exit)

newmem:
push ebx
lea ebx,[eax+60]
mov [storyEvent],ebx
pop ebx
jmp originalcode

originalcode:
mov ecx,[eax+60]
mov edx,[edi]

exit:
jmp returnhere

"Need For Speed The Run.exe"+59BF15:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(storyEvent)
"Need For Speed The Run.exe"+59BF15:
mov ecx,[eax+60]
mov edx,[edi]
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1107</ID>
              <Description>"Story Mode Event Challenge"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>storyEvent</Address>
              <Offsets>
                <Offset>1C</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1418</ID>
          <Description>"Time Event Check"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(event_check,Need For Speed The Run.exe,BC 00 00 00 74 35 8B 54 24 08 56 8B 74 24 08 39 30 75 1C F3 0F 7E 00 66 0F D6 02)
label(code)
label(return_event_check)
alloc(time,$18)

time:
  dd 0 0 0 0 0 0

registersymbol(time)
alloc(event_1,$200)

event_1:
  pop eax
  //easy difficulty times
  mov [eax+4],(float)36
  mov [time],(float)29
  mov [time+4],(float)40
  mov [time+8],(float)29
  mov [time+C],(float)29
  mov [time+14],4
  cmp [difficulty],0
  je code
  jmp mov_times

event_2:
  pop eax
  //easy difficulty times
  mov [eax+4],(float)30
  mov [time],(float)35
  mov [time+4],(float)29
  mov [time+8],(float)27
  mov [time+C],(float)25
  mov [time+14],4
  cmp [difficulty],0
  je code
  jmp mov_times

event_3:
  pop eax
  //easy difficulty times
  mov [eax+4],(float)32
  mov [time],(float)35
  mov [time+4],(float)34
  mov [time+8],(float)25
  mov [time+14],3
  cmp [difficulty],0
  je code
  jmp mov_times

event_4:
  pop eax
  //easy difficulty times
  mov [eax+4],(float)31
  mov [time],(float)30
  mov [time+4],(float)32
  mov [time+8],(float)31
  mov [time+C],(float)31
  mov [time+10],(float)27
  mov [time+14],5
  cmp [difficulty],0
  je code
  jmp mov_times

event_5:
  pop eax
  //easy difficulty times
  mov [eax+4],(float)47
  mov [time],(float)37
  mov [time+4],(float)30
  mov [time+8],(float)32
  mov [time+C],(float)36
  mov [time+14],4
  cmp [difficulty],0
  je code
  jmp mov_times

event_6:
  pop eax
  //easy difficulty times
  mov [eax+4],(float)43
  mov [time],(float)28
  mov [time+4],(float)25
  mov [time+8],(float)26
  mov [time+C],(float)33
  mov [time+14],4
  cmp [difficulty],0
  je code

mov_times:
  push edx
  push eax
  mov eax,2
  imul [difficulty]
  add eax,2
  cvtsi2ss xmm1,eax
  pop eax
  pop edx
  movss xmm0,[eax+4]
  subss xmm0,xmm1
  movss [eax+4],xmm0
  cmp [time+14],5
  jne mov_4_times
  movss xmm0,[time+10]
  subss xmm0,xmm1
  movss [time+10],xmm0

mov_4_times:
  pshufd xmm1,xmm1,0
  movups xmm0,[time]
  subps xmm0,xmm1
  movups [time],xmm0
  xorpd xmm0,xmm0
  xorpd xmm1,xmm1
  jmp code

compare_event:
  cmp [eax+8],0
  jne code
  push eax
  mov eax,[storyEvent]
  cmp [eax+1C],2ACFE1A3 //Altamont Pass Rev
  je event_1
  cmp [eax+1C],54CCF3CD //Yosemite Approach Rev B
  je event_2
  cmp [eax+1C],D3CCC800 //Desert Valley Rev
  je event_3
  cmp [eax+1C],6C72577F //Independence Pass A
  je event_4
  cmp [eax+1C],FC0B3FFA //Buffalo Gap Rev
  je event_5
  cmp [eax+1C],A7DAFE1E //Smoky Mountain Rev B
  je event_6
  pop eax
  mov [time+14],0

code:
  movq xmm0,[eax]
  movq [edx],xmm0
  jmp return_event_check

event_check+13:
  jmp compare_event
  nop 3

return_event_check:
registersymbol(event_check)

[DISABLE]
event_check+13:
  db F3 0F 7E 00 66 0F D6 02

dealloc(event_1)
dealloc(time)
unregistersymbol(time)
unregistersymbol(event_check)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1419</ID>
          <Description>"Tier 6 Timer"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(time_crack,Need For Speed The Run.exe,F3 0F 10 44 24 40 55)
alloc(change_time,$30)
label(original_code)
label(return_time_crack)

change_time:
  cmp [time+14],0
  je original_code
  push eax
  mov eax,[esi+8]
  mov eax,[time+eax*4]
  mov [esp+44],eax
  pop eax

original_code:
  movss xmm0,[esp+40]
  jmp return_time_crack

time_crack:
  jmp change_time
  nop

return_time_crack:
registersymbol(time_crack)
[DISABLE]
time_crack:
  db F3 0F 10 44 24 40

dealloc(change_time)
unregistersymbol(time_crack)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1380</ID>
          <Description>"Tier 6 Car Select"</Description>
          <Options moActivateChildrenAsWell="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(cars_swap,Need For Speed The Run.exe,85 C0 74 02 89 30 8D)
registersymbol(carArray)
alloc(carArray,$58)
registersymbol(ind)
alloc(ind,8)
registersymbol(audiarr)
alloc(audiarr,12)
alloc(compare,$200)
label(code)
label(return)

carArray:
  dd A24E5527
  dd 4044360D
  dd 5343662B
  dd 4CE08077
  dd 674879F3
  dd 70A26B8C
  dd 37EE9E16
  dd 82E84B22
  dd AA1E1BB7
  dd 3CDD7591
  dd 1F91C074
  dd B7BCE1FB
  dd E1994BB4
  dd F75EAC6B
  dd 4C4976DC
  dd 47BD89FA
  dd 1DE1A781
  dd 280679F0
  dd 8020A8F8
  dd 6A6BFA7E
  dd 8537FAF9
  dd 353E1102

ind:
  dd 0
  dd 0

audiarr:
  dd 4044360D
  dd 4C4976DC
  dd 1DE1A781

compare:
  test eax,eax
  je "Need For Speed The Run.exe"+45354B
  cmp sp,EE8C
  je gas_station
  cmp sp,EF50
  je garage
  jmp code

audi_compare:
  cmp esi,0D93ED81
  je audi_car
  cmp esi,1C04CCA2
  je mov_0
  jmp ind_compare

audi_car:
  mov [ind+4],1
  mov esi,[audiarr+eax]
  jmp pop_eax

mov_0:
  mov esi,0
  inc [ind]
  mov [ind+4],0
  jmp pop_eax

ind_4_gs:
  mov [ind],0

gas_station:
  cmp [ind],2
  jg ind_4_gs
  push eax
  sub eax,ebp
  sub eax,40
  jmp ind_compare

ind_4:
  mov [ind],0

garage:
  cmp [ind],2
  jg ind_4
  push eax
  sub eax,ebp
  sub eax,40
  cmp eax,0
  je audi_compare
  cmp eax,C
  je audi_compare
  cmp [ind+4],1
  je audi_car

ind_compare:
  cmp eax,54
  jg mov_0
  mov esi,[carArray+eax]

pop_eax:
  pop eax

code:
  mov [eax],esi
  jmp return

cars_swap:
  jmp compare
  nop
return:
registersymbol(cars_swap)

[DISABLE]
cars_swap:
  db 85 C0 74 02 89 30

unregistersymbol(cars_swap)
unregistersymbol(carArray)
unregistersymbol(ind)
dealloc(carArray)
dealloc(ind)
dealloc(compare)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1300</ID>
          <Description>"Tier 4 Ai Cars Performance Swap + Tier 6 Livery Swap"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "99 B8 E9 6D" --1844033689 --ast_one_77_10_ai_220

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "88 D5 B8 9A"
    writeInteger(performance,AOBtoDEC(PRF_ID))

    address = address + 0x80
    performance = address + 0x60
    writeInteger(performance,AOBtoDEC(PRF_ID))

   --2952613532 --ast_van_v12_10_ai_184
    address = address + 0xD80
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "8E B4 6A 63"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 3 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --2940168599 --aud_r8_v10_10_ai_209
    address = address + 0xD00
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "A7 67 99 8A"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 7 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --1176546926 --aud_r8_v10_10_test_rainbow
    address = address + 0xE00
    local livery = address + 0x50
    local performance = address + 0x60
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)
    LIV_ID = "71 D5 A8 D1"
    PRF_ID = "A7 67 99 8A"
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    --346836159 --aud_ur_qua_91_ai_073
    address = address + 0x300
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "A7 67 99 8A"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 4 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --3602306200 --bmw_1m_cou_11_ai_104
    address = address + 0xD80
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "DB AD E4 33"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 7 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --3965047869 --bmw_m3_e30_90_ai_080
    address = address + 0x1200
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "88 D5 B8 9A"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 5 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --3696104006 --bmw_m3_gts_10_ai_170
    address = address + 0xE00
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "88 D5 B8 9A"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 5 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --1925569773 --che_cam_ss_67_ai_017
    address = address + 0x1D00
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "BD 91 44 C5"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 6 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --1413757768 --che_cam_zl1_13_ai_093
    address = address + 0xE00
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "BD 91 44 C5"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 9 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --2053301536 --che_el_cam_70_ai_094
    address = address + 0x1280
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "BD 91 44 C5"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 8 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --495760540 --che_el_cam_70_pp_rival_1
    address = address + 0x180
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "BD 91 44 C5"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 3 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --2240495415 --che_vet_cbn_10_ai_185
    address = address + 0xD80
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "4B 46 F7 DD"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 7 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --2240495415 --dod_cha_srt_08_ai_003
    address = address + 0x1800
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "BD 91 44 C5"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 6 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --1013798201 --dod_cha_rt_71_ai_011
    address = address + 0x1180
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "BD 91 44 C5"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 6 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --3394572208 --for_foc_rs_10_ai_087
    address = address + 0xD80
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "A9 5F 58 1A"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 5 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --2911404618 --for_gt_stk_06_ai_189
    address = address + 0x1300
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "7A 5A E0 DB"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 5 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --28547989 --for_mus_302_69_ai_103
    address = address + 0xE80
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "BD 91 44 C5"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 4 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --3045319024 --for_mus_bos_12_ai_082
    address = address + 0xD80
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "DB AD E4 33"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 5 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --1133916393 --for_mus_rtr_12_ai_097
    address = address + 0x1180
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "DB AD E4 33"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 5 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --570367103 --for_rtr_x_69_ai_249
    address = address + 0x980
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "BD 91 44 C5"
    writeInteger(performance,AOBtoDEC(PRF_ID))

    --2113738580 --lam_ave_700_12_ai_264
    address = address + 0x1B00
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "89 3F 57 91"
    writeInteger(performance,AOBtoDEC(PRF_ID))

    --2196261666 --lam_ave_700_12_pp_run
    address = address + 0x80
    local livery = address + 0x50
    local LIV_ID = hexByteString(livery)
    LIV_ID = "47 09 0D 8F"
    writeInteger(livery,AOBtoDEC(LIV_ID))

    --3957356784 --lam_gal_vb_10_ai_028
    address = address + 0x1580
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "9A 98 BE 63"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 7 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --2615959382 --lam_miu_sv_71_ai_124
    address = address + 0x1180
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "16 FA DF 4B"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 5 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --3084366756 --lam_mur_sv_10_ai_253
    address = address + 0xD80
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "6F BF 82 18"
    writeInteger(performance,AOBtoDEC(PRF_ID))

    --1712834822 --lam_mur_sv_10_ai_262
    address = address + 0x80
    performance = address + 0x60
    writeInteger(performance,AOBtoDEC(PRF_ID))

    --601049932 --lam_ses_ele_11_ai_261
    address = address + 0xD80
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "16 FA DF 4B"
    writeInteger(performance,AOBtoDEC(PRF_ID))

    --485585180 --lot_evo_stk_10_ai_032
    address = address + 0x1280
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "16 FA DF 4B"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 7 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --3192479687 --lot_exi_260_10_ai_072
    address = address + 0x1180
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "F0 96 0C EE"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 7 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --3434106833 --maz_mx5_rht_09_ai_013
    address = address + 0x1200
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "74 C0 91 1F"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 7 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --3685348580 --maz_rx7_rz_98_ai_008
    address = address + 0x1180
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "74 C0 91 1F"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 5 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --1844033689 --mcl_f1_stk_94_pp_stock_1
    address = address + 0x1300
    local livery = address + 0x50
    local LIV_ID = hexByteString(livery)
    LIV_ID = "00 C4 67 57"
    writeInteger(livery,AOBtoDEC(LIV_ID))

    --2100163924 --mcl_mp4_12c_12_ai_009
    address = address + 0xD00
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "B4 4B 99 E1"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 6 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --2328589773 --mer_sls_amg_10_ai_190
    address = address + 0xF00
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "88 D5 B8 9A"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 3 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --3367604003 --mer_sls_amg_10_rival
    address = address + 0x180
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "88 D5 B8 9A"
    writeInteger(performance,AOBtoDEC(PRF_ID))

    --3951888656 --mit_evo_x_08_ai_014
    address = address + 0xD00
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "88 D5 B8 9A"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 6 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --2003853787 --nis_240_zg_71_ai_086
    address = address + 0x1280
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "F0 96 0C EE"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 5 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --4150176875 --nis_240_zg_71_pp_rare_1
    address = address + 0x100
    bodykit = address + 0x18
    hood = address + 0x38
    livery = address + 0x50
    BDK_ID = hexByteString(bodykit)
    HOD_ID = hexByteString(hood)
    LIV_ID = hexByteString(livery)
    BDK_ID = "9A 9A 29 EB"
    HOD_ID = "83 87 30 49"
    LIV_ID = "60 7E 49 BA"
    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))

    --1028240723 --nis_370_z_09_ai_114
    address = address + 0xE80
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "74 C0 91 1F"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 6 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --4225104048 --nis_370_z_09_pp_rival_1
    address = address + 0x100
    performance = address + 0x60
    writeInteger(performance,AOBtoDEC(PRF_ID))

    --2151677351 --nis_370_z_09_pp_rival_2
    address = address + 0x80
    performance = address + 0x60
    writeInteger(performance,AOBtoDEC(PRF_ID))

    --2383789778 --nis_gtr_r32_91_ai_030
    address = address + 0x1180
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "DB AD E4 33"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 7 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --2463598039 --nis_gtr_stk_73_ai_089
    address = address + 0x1D80
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "8E B4 6A 63"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 4 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --2924052145 --nis_gtr_v_10_ai_018
    address = address + 0xE80
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "A9 5F 58 1A"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 10 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --2814757837 --nis_s14_a_97_ai_001
    address = address + 0x1200
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "8E B4 6A 63"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 7 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --272462180 --pag_hua_stk_11_ai_260
    address = address + 0x1200
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "88 DB C6 6B"
    writeInteger(performance,AOBtoDEC(PRF_ID))

    --3156570098 --pag_zon_cin_10_ai_256
    address = address + 0xE00
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "A0 33 70 A4"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 4 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --3713203550 --pon_fir_stk_78_ai_010
    address = address + 0xD80
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "8E B4 6A 63"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 6 do
         address = address + 0x80
         performance = address + 0x60
         writeInteger(performance,AOBtoDEC(PRF_ID))
         n = n + 1
    end

    --1966095632 --por_918_rsr_11_ai_255
    address = address + 0xF00
    local livery = address + 0x50
    local performance = address + 0x60
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)
    PRF_ID = "88 27 04 36"
    writeInteger(performance,AOBtoDEC(PRF_ID))

    --4227505015 --por_918_rsr_11_ai_265
    address = address + 0x80
    performance = address + 0x60
    writeInteger(performance,AOBtoDEC(PRF_ID))

    --2235038457 --por_918_rsr_11_pp_rare_1
    address = address + 0x80
    livery = address + 0x50
    LIV_ID = "C7 CE CB 5D"
    writeInteger(livery,AOBtoDEC(LIV_ID))

    --893260034 --por_918_rsr_11_pp_run
    address = address + 0x80
    livery = address + 0x50
    LIV_ID = "00 51 21 98"
    writeInteger(livery,AOBtoDEC(LIV_ID))

    --49443397 --por_991_s_12_ai_183
    address = address + 0xD00
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "8E B4 6A 63"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 3 do
          address = address + 0x80
          performance = address + 0x60
          writeInteger(performance, AOBtoDEC(PRF_ID))
          n = n + 1
    end

    --1286644194 --por_993_gt2_96_ai_186
    address = address + 0x1400
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "74 C0 91 1F"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 4 do
          address = address + 0x80
          performance = address + 0x60
          writeInteger(performance, AOBtoDEC(PRF_ID))
          n = n + 1
    end

    --2815800777 --por_gt3_rs_10_ai_192
    address = address + 0x1700
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "74 C0 91 1F"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 4 do
          address = address + 0x80
          performance = address + 0x60
          writeInteger(performance, AOBtoDEC(PRF_ID))
          n = n + 1
    end

    --2670200624 --ren_meg_rs_10_ai_006
    address = address + 0xF00
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "DB AD E4 33"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 7 do
          address = address + 0x80
          performance = address + 0x60
          writeInteger(performance, AOBtoDEC(PRF_ID))
          n = n + 1
    end

    --3357183898 --she_day_cou_65_ai_096
    address = address + 0x1200
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "F0 96 0C EE"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 4 do
          address = address + 0x80
          performance = address + 0x60
          writeInteger(performance, AOBtoDEC(PRF_ID))
          n = n + 1
    end

    --2832144233 --she_mus_snk_12_ai_116
    address = address + 0xE80
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "A9 5F 58 1A"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 3 do
          address = address + 0x80
          performance = address + 0x60
          writeInteger(performance, AOBtoDEC(PRF_ID))
          n = n + 1
    end

    --3405351478 --sub_wrx_sti_09_ai_007
    address = address + 0x1200
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "DB AD E4 33"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 10 do
          address = address + 0x80
          performance = address + 0x60
          writeInteger(performance, AOBtoDEC(PRF_ID))
          n = n + 1
    end

    --2927791046 --toy_cor_stk_86_ai_004
    address = address + 0x1300
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "74 C0 91 1F"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 6 do
          address = address + 0x80
          performance = address + 0x60
          writeInteger(performance, AOBtoDEC(PRF_ID))
          n = n + 1
    end

    --1542505926 --toy_sup_stk_98_ai_005
    address = address + 0xE80
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "74 C0 91 1F"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 7 do
          address = address + 0x80
          performance = address + 0x60
          writeInteger(performance, AOBtoDEC(PRF_ID))
          n = n + 1
    end

    --1840926221 --vol_gti_mk1_76_ai_002
    address = address + 0x5A80
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "74 C0 91 1F"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 7 do
          address = address + 0x80
          performance = address + 0x60
          writeInteger(performance, AOBtoDEC(PRF_ID))
          n = n + 1
    end

    --1014047533 --vol_sci_r_10_ai_060
    address = address + 0xE00
    local performance = address + 0x60
    local PRF_ID = hexByteString(performance)
    PRF_ID = "DB AD E4 33"
    writeInteger(performance,AOBtoDEC(PRF_ID))
    n = 1
    while n &lt; 4 do
          address = address + 0x80
          performance = address + 0x60
          writeInteger(performance, AOBtoDEC(PRF_ID))
          n = n + 1
    end
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1413</ID>
          <Description>"Text Swap (ru)"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(text_change,Need For Speed The Run.exe,89 94 24 8C 09 00 00)
alloc(checkvar,$C)
alloc(nearMissText,$28)
alloc(carClassText,$24)
alloc(suicidalText,$1C)
alloc(supercarRunText,$38)
alloc(newmem,$300)
label(code)
label(return)

checkvar:
  dd 0
  dd 0
  dd 0

registersymbol(checkvar)

nearMissText:
  dd 041F041E //ОП
  dd 04210410 //АС
  dd 041E041D //НО
  dd 00200415 //[Е ]
  dd 04110421 //СБ
  dd 0418041B //ЛИ
  dd 04150416 //ЖЕ
  dd 0418041D //НИ
  dD 00200415 //[Е ]
  dd 0 //null value

registersymbol(nearMissText)

carClassText:
  dd 00750041 //Au
  dd 00690064 //di
  dd 0020002C //[, ]
  dd 0069004E //Ni
  dd 00730073 //ss
  dd 006E0061 //an
  dd 04430020 //[ у]
  dd 0020002E //[. ]
  dd 00000036 //[6 ]

registersymbol(carClassText)

suicidalText:
  dd 04100421 //СА
  dd 041E041C //МО
  dd 04110423 //УБ
  dd 04190418 //ИЙ
  dd 04100426 //ЦА
  dd 00210021 //!!
  dd 00210021 //!!

registersymbol(suicidalText)

supercarRunText:
  dd 00480054 //TH
  dd 00200045 //[E ]
  dd 00550053 //SU
  dd 00450050 //PE
  dd 00430052 //RC
  dd 00520041 //AR
  dd 00520020 // R
  dd 004E0055 //UN
  dd 00520020 // R
  dd 00570045 //EW
  dd 0052004F //OR
  dd 0045004B //KE
  dd 00000044 //D
  dd 0 //null value

registersymbol(supercarRunText)

newmem:
  push eax
  mov ebx,[ebx]
  cmp [ebx+10],00210020 //SUICIDAL[ !]!!
  je suicidal
  cmp [ebx+C],0422042D //ВЫБОР [ЭТ]АПА
  je title_check
  cmp [ebx+10],04220421 //БЛИЗКОЕ [СТ]ОЛКНОВЕНИЕ
  je near_miss
  cmp [ebx+14],04220421 //ВСТРЕЧНОЕ [СТ]ОЛКНОВЕНИЕ
  je oncoming_near_miss
  cmp [ebx+14],043F0022 //Уровень 4 ["п]рокачанная"
  je story_car_select
  cmp [checkvar+8],1
  je car_swap_var_cmp
  cmp [ebx+4],041C0416 //НА[ЖМ]ИТЕ
  je press

car_swap_var_cmp:
  cmp [checkvar+4],1
  jne car_swap_check

tier_check:
  cmp cx,DDD4 //compare needed widget
  jne car_swap_check
  cmp [ebx+2A],002E0440 //Класс машины: Любые у[р.]
  je swap_level2
  cmp [ebx+34],002E0440 //Класс машины: Любые Audi у[р.]
  je swap_audi

car_swap_check:
  mov eax,[ind]
  cmp eax,[checkvar]
  je code
  cmp [ebx+E],002E0440 //Любые у[р.]
  je swap_level
  cmp [ebx+18],002E0440 //Любые Audi у[р.]
  je swap_level_audi

code:
  pop eax
  mov ebx,[esp]
  mov [esp+0000098C],edx
  jmp return

suicidal:
  cmp [ebx+14],00210021 //SUICIDAL ![!!]
  jne code
  push ecx
  push edx
  push esi
  mov ecx,7  //num of iterations
  mov edx,0  //index
  mov esi,4C //offset to needed array
  jmp mov_text

near_miss:
  cmp cx,DA14 //compare needed widget
  jne code
  push ecx
  push edx
  push esi
  mov ecx,A
  mov edx,0
  mov esi,0

mov_text:
  mov eax,[nearMissText+esi+edx*4]
  mov [ebx+edx*4],eax
  inc dl
  loop mov_text
  pop esi
  pop edx
  pop ecx
  jmp code

oncoming_near_miss:
  cmp cx,DA14 //compare needed widget
  jne code
  push ecx
  push edx
  push esi
  mov ecx,6
  mov edx,4
  mov esi,0
  add ebx,4 //offset to needed char position
  jmp mov_text

swap_level_audi:
  mov [checkvar],eax
  push ecx
  push edx
  push esi
  mov ecx,9
  mov edx,0
  mov esi,28
  jmp mov_text

swap_audi:
  push ecx
  push edx
  push esi
  mov ecx,9
  mov edx,0
  mov esi,28
  add ebx,1C
  jmp mov_text

press:
  mov [checkvar+8],1
  cmp [ebx+E],00530020 //НАЖМИТЕ[ S]TART
  je car_swap_var_cmp
  push ecx
  push edx
  push esi
  mov ecx,E
  mov edx,0
  mov esi,68
  jmp mov_text

swap_level:
  mov [ebx+12],00360020
  mov [checkvar],eax
  jmp code

swap_level2:
  mov [ebx+2E],00360020
  jmp code

story_car_select:
  mov [ebx+10],00200036
  jmp code

title_check:
  cmp cx,DA30 //compare needed widget
  je mov_var_2
  cmp cx,DB54 //compare needed widget
  je mov_var_2
  dec [checkvar+4]
  jmp car_swap_check

mov_var_2:
  mov [checkvar+4],2
  jmp tier_check

text_change:
  jmp newmem
  nop 2
return:
registersymbol(text_change)

[DISABLE]

text_change:
  db 89 94 24 8C 09 00 00

dealloc(text_change)
dealloc(checkvar)
dealloc(newmem)
unregistersymbol(text_change)
unregistersymbol(checkvar)
unregistersymbol(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1292</ID>
          <Description>"Junkyard"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(junkyard_event_1_1,Need For Speed The Run.exe,8B 82 68 02 00 00)
alloc(newmem,$20)

label(code)
label(return)

newmem:
  cmp [edx+00000268],48E0DCCC
  jne code
  mov [edx+00000268],4620AE6E
code:
  mov eax,[edx+00000268]
  jmp return

junkyard_event_1_1:
  jmp newmem
  nop
return:
registersymbol(junkyard_event_1_1)

[DISABLE]
junkyard_event_1_1:
  db 8B 82 68 02 00 00

unregistersymbol(junkyard_event_1_1)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1293</ID>
          <Description>"Junkyard 1.2"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(junkyard_event_1_2,Need For Speed The Run.exe,8B 81 E0 00 00 00 C3 CC B8)
alloc(newmem,$20)
label(code)
label(return)

newmem:
  cmp [ecx+000000E0],48E0DCCC
  jne code
  mov [ecx+000000E0],4620AE6E

code:
  mov eax,[ecx+000000E0]
  jmp return

junkyard_event_1_2:
  jmp newmem
  nop
return:
registersymbol(junkyard_event_1_2)

[DISABLE]
junkyard_event_1_2:
  db 8B 81 E0 00 00 00

unregistersymbol(junkyard_event_1_2)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>862</ID>
          <Description>"SanFran"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
[ENABLE]
function SanFran()
    if readPointer("[[[[[027147B0]+344]+24]+4]+38]+0") ~= nil then
        local lastCarClassID = getAddress("[[[[[027147B0]+344]+24]+4]+38]+0")
        local lastCarID = lastCarClassID + 0x4
        if lastCarClassID ~= nil and readInteger(lastCarClassID) == 2580303702 and readInteger(lastCarID) == 1165774027 then
            first = lastCarClassID + 0x4
            second = lastCarClassID + 0xC
            third = lastCarClassID + 0x14
            fourth = lastCarClassID + 0x1C
            fifth = lastCarClassID + 0x24

            writeInteger(first,1732803059)
            writeInteger(second,4150176875)
            writeInteger(third,1203603962)
            writeInteger(fourth,3082609147)
            writeInteger(fifth,893260034)
        end
    end
end

sf = createTimer(nil)
timer_onTimer(sf,SanFran)
timer_setInterval(sf, 1000)
timer_setEnabled(sf, true)

[DISABLE]
timer_setEnabled(sf, false)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>863</ID>
          <Description>"LasVegas"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
[ENABLE]
function LasVegas()
    if readPointer("[[[[027147B0]+56C]+64]+A0]+0") ~= nil then
        local lastCarClassID = getAddress("[[[[027147B0]+56C]+64]+A0]+0")
        local lastCarID = lastCarClassID + 0x4
        if lastCarClassID ~= nil and readInteger(lastCarClassID) == 2580303702 and readInteger(lastCarID) == 3662254698 then
            first = lastCarClassID + 0x4
            second = lastCarClassID + 0xC
            third = lastCarClassID + 0x14

            writeInteger(first,3882992039)
            writeInteger(second,2998207530)
            writeInteger(third,1293973268)
        end
    end
end

lv = createTimer(nil)
timer_onTimer(lv,LasVegas)
timer_setInterval(lv, 1000)
timer_setEnabled(lv, true)

[DISABLE]
timer_setEnabled(lv, false)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>864</ID>
          <Description>"Chicago"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
[ENABLE]
function Chicago()
if readPointer("[[[[027147B0]+41C]+5C]+A0]+0") ~= nil then
   local lastCarClassID = getAddress("[[[[027147B0]+41C]+5C]+A0]+0")
   local lastCarID = lastCarClassID + 0x4
        if lastCarClassID ~= nil and readInteger(lastCarClassID) == 2580303702 and readInteger(lastCarID) == 470076578 then
            first = lastCarClassID + 0x4
            second = lastCarClassID + 0xC
            third = lastCarClassID + 0x14

            writeInteger(first,1279882972)
            writeInteger(second,501327745)
            writeInteger(third,1078212109)
        end
    end
end

cc = createTimer(nil)
timer_onTimer(cc,Chicago)
timer_setInterval(cc, 1000)
timer_setEnabled(cc, true)

[DISABLE]
timer_setEnabled(cc, false)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>865</ID>
          <Description>"Uri"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
[ENABLE]
function Uri()
    if readPointer("[[[[[027147B0]+7A4]+24]+8]+A0]+0") ~= nil then
        local lastCarClassID = getAddress("[[[[[027147B0]+7A4]+24]+8]+A0]+0")
        local lastCarID = lastCarClassID + 0x4
        if lastCarClassID ~= nil and readInteger(lastCarClassID) == 2580303702 and readInteger(lastCarID) == 3362615761 then
            first = lastCarClassID + 0x4
            second = lastCarClassID + 0xC
            third = lastCarClassID + 0x14

            writeInteger(first,2235038457)
            writeInteger(second,2149624056)
            writeInteger(third,2196261666)
        end
    end
end

ur = createTimer(nil)
timer_onTimer(ur,Uri)
timer_setInterval(ur, 1000)
timer_setEnabled(ur, true)

[DISABLE]
timer_setEnabled(ur, false)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>799</ID>
          <Description>"ID_PLAYLIST_CARRESTICTION_OPEN"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,$30)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
push ebx
lea ebx,[esi+48]
mov [ebx],(int)0 //ID_PLAYLIST_CARRESTICTION_OPEN
mov ecx,[esi+48]
push 00
pop ebx

originalcode:
//mov ecx,[esi+48]
//push 00

exit:
jmp returnhere

"Need for Speed The Run.exe"+48D6C5:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"Need for Speed The Run.exe"+48D6C5:
mov ecx,[esi+48]
push 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1318</ID>
          <Description>"UNLOCK_ALL_VEHICLES"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(unlock_all_cars,Need For Speed The Run.exe,38 58 1B 74 11)
alloc(newmem,$20)
label(code)
label(return)

newmem:
  mov [eax+18],00010001

code:
  cmp [eax+1B],bl
  je "Need For Speed The Run.exe"+53D634
  jmp return

unlock_all_cars:
  jmp newmem
return:
registersymbol(unlock_all_cars)

[DISABLE]
unlock_all_cars:
  db 38 58 1B 74 11

unregistersymbol(unlock_all_cars)
dealloc(newmem)
	       
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
